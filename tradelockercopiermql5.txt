#include <Trade/DealInfo.mqh>
#include <Generic/HashMap.mqh>

// ===================== USER CONFIG =====================
// Use `input` variables so they are recognized as valid in MQL5.
input string  g_TradeLockerBaseUrl     = "https://api.tradelocker.com";
input string  g_TradeLockerEmail       = "your_email@example.com";
input string  g_TradeLockerPassword    = "your_password";
input string  g_TradeLockerServer      = "SERVER";  // If required by TradeLocker
input string  g_TradeLockerAccountId   = "123456";  // Example ID
input long    g_TradableInstrumentId   = 12345;     // E.g. used in placeOrder or closePositions
input int     MAGIC_NUMBER             = 12345;     // Local trades filter
// ======================================================

// Global tokens and session expiry
string   g_accessToken   = "";
string   g_refreshToken  = "";
datetime g_sessionExpiry = 0; // If you want to store a token expiration time

// HashMap: local position ID -> TradeLocker "orderId" or "positionId"
CHashMap<ulong, ulong> positions;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Attempt to login to TradeLocker
   int res = login();
   if(res != 201 && res != 200)
   {
      Print("Failed to authenticate with TradeLocker in OnInit. code=", res);
      return(INIT_FAILED);
   }
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Optionally, call logout if your TradeLocker API supports it
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // If tokens have an expiration, refresh or re-login if near expiry
   // E.g. if(TimeCurrent() + 300 > g_sessionExpiry) refreshToken();
}

//+------------------------------------------------------------------+
//| OnTradeTransaction: replicate local trades to TradeLocker        |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction &trans, 
                        const MqlTradeRequest &request, 
                        const MqlTradeResult &result)
{
   if(trans.type == TRADE_TRANSACTION_DEAL_ADD)
   {
      // A local deal was executed
      CDealInfo deal;
      if(!HistoryDealSelect(trans.deal))
      {
         Print("Failed to select deal #", trans.deal);
         return;
      }
      deal.Ticket(trans.deal);

      string orderCode = IntegerToString(deal.Ticket());
      string symbol    = deal.Symbol();
      double quantity  = deal.Volume();

      // If it's FOREX, scale volume to units
      if(SymbolInfoInteger(symbol, SYMBOL_TRADE_CALC_MODE) == SYMBOL_CALC_MODE_FOREX)
         quantity *= 100000.0;

      ulong orderId;
      // Check if itâ€™s an open (DEAL_ENTRY_IN) or close (DEAL_ENTRY_OUT)
      if(deal.Entry() == DEAL_ENTRY_IN)
      {
         // Opening a new position
         string positionEffect = "OPEN";
         string side = (deal.DealType() == DEAL_TYPE_BUY) ? "BUY" : "SELL";

         // Attempt placing order up to 10 times
         for(int i=0; i<10; i++)
         {
            int res = placeOrder(orderCode, symbol, quantity, positionEffect, "", side, orderId);
            if(res == 200)
            {
               // Store mapping from local pos -> remote order ID
               positions.Add(trans.position, orderId);
               PrintFormat("Opened pos #%d in TradeLocker as order #%d", trans.position, orderId);
               break;
            }
            else
            {
               PrintFormat("Attempt %d to place OPEN order in TradeLocker failed, code=%d", i+1, res);
            }
         }
      }
      else if(deal.Entry() == DEAL_ENTRY_OUT)
      {
         // Closing an existing position
         string positionEffect = "CLOSE";

         ulong remoteOrderId;
         if(!positions.TryGetValue(trans.position, remoteOrderId))
         {
            Print("No TradeLocker mapping found for local pos #", trans.position);
            return;
         }

         string positionCode = IntegerToString(remoteOrderId);
         string side = (deal.DealType() == DEAL_TYPE_BUY) ? "BUY" : "SELL";

         for(int i=0; i<10; i++)
         {
            int res = placeOrder(orderCode, symbol, quantity, positionEffect, positionCode, side, orderId);
            if(res == 200)
            {
               positions.Remove(trans.position);
               PrintFormat("Closed pos #%d on TradeLocker with new order #%d", trans.position, orderId);
               break;
            }
            else
            {
               PrintFormat("Attempt %d to place CLOSE order in TradeLocker failed, code=%d", i+1, res);
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
//| login() - Obtain a JWT from TradeLocker                          |
//+------------------------------------------------------------------+
int login()
{
   string url = g_TradeLockerBaseUrl + "/auth/jwt/token";
   char post[], result[];
   string resultHeader;
   string headers = "Content-Type: application/json\r\nAccept: application/json\r\n";

   // JSON body
   string json = "{\"email\":\""   + g_TradeLockerEmail    + "\","
                 "\"password\":\"" + g_TradeLockerPassword + "\","
                 "\"server\":\""   + g_TradeLockerServer   + "\"}";

   StringToCharArray(json, post, 0, StringLen(json));
   ResetLastError();

   int res = WebRequest("POST", url, headers, 5000, post, result, resultHeader);
   if(res == -1)
   {
      Print("login() WebRequest failed, err=", GetLastError());
      return res;
   }
   else if(res != 201 && res != 200)
   {
      Print("login() request failed, http code=", res);
      return res;
   }
   else
   {
      string msg = CharArrayToString(result);
      Print("login() success: ", msg);

      // Parse the JSON for "accessToken" and "refreshToken"
      g_accessToken  = getJsonStringValue(msg, "accessToken");
      g_refreshToken = getJsonStringValue(msg, "refreshToken");

      if(g_accessToken == "")
      {
         Print("Failed to parse accessToken from login response");
         return res;
      }

      // e.g. set a 30-minute session
      g_sessionExpiry = TimeCurrent() + (30*60);

      Print("TradeLocker login OK, accessToken=", g_accessToken);
   }
   return res;
}

//+------------------------------------------------------------------+
//| refreshToken() - obtains new tokens from /auth/jwt/refresh       |
//+------------------------------------------------------------------+
int refreshToken()
{
   string url = g_TradeLockerBaseUrl + "/auth/jwt/refresh";
   char post[], result[];
   string resultHeader;
   string headers = "Content-Type: application/json\r\nAccept: application/json\r\n";

   string json = "{\"refreshToken\":\"" + g_refreshToken + "\"}";
   StringToCharArray(json, post, 0, StringLen(json));
   ResetLastError();

   int res = WebRequest("POST", url, headers, 5000, post, result, resultHeader);
   if(res == -1)
   {
      Print("refreshToken() WebRequest failed, err=", GetLastError());
      return res;
   }
   else if(res != 201 && res != 200)
   {
      Print("refreshToken() request failed, http code=", res);
      return res;
   }
   else
   {
      string msg = CharArrayToString(result);
      Print("refreshToken() success: ", msg);

      g_accessToken  = getJsonStringValue(msg, "accessToken");
      g_refreshToken = getJsonStringValue(msg, "refreshToken");
      if(g_accessToken == "")
      {
         Print("Failed to parse new accessToken from refresh response");
         return res;
      }
      g_sessionExpiry = TimeCurrent() + (30*60);
      Print("TradeLocker tokens refreshed OK, new accessToken=", g_accessToken);
   }
   return res;
}

//+------------------------------------------------------------------+
//| placeOrder() - replicate trade to /trade/accounts/{accountId}/orders
//+------------------------------------------------------------------+
int placeOrder(string orderCode, string instrument, double quantity, 
               string positionEffect, string positionCode, 
               string side, ulong &newOrderId)
{
   string url = g_TradeLockerBaseUrl + "/trade/accounts/" + g_TradeLockerAccountId + "/orders";
   char post[], result[];
   string resultHeader;

   // Bearer {accessToken} is required
   string headers = "Content-Type: application/json\r\nAccept: application/json\r\nAuthorization: Bearer " + g_accessToken + "\r\n";
   
   // Mandatory fields from your doc: qty, routeId, side, validity, type, tradableInstrumentId
   // We'll do routeId=1, validity="GTC", type="market", price=0, stopLoss=0, etc.
   // We also append the "orderCode", "positionEffect", "positionCode", etc.

   string json = StringFormat(
      "{"
         "\"qty\":%f," 
         "\"routeId\":1," 
         "\"side\":\"%s\"," 
         "\"validity\":\"GTC\","
         "\"type\":\"market\","
         "\"tradableInstrumentId\":%d,"
         "\"price\":0,"
         "\"stopLoss\":0,"
         "\"takeProfit\":0,"
         "\"stopPrice\":0,"
         "\"positionEffect\":\"%s\","
         "\"positionCode\":\"%s\","
         "\"orderCode\":\"%s\","
         "\"instrument\":\"%s\""
      "}",
      quantity,
      side,
      g_TradableInstrumentId,
      positionEffect,
      positionCode,
      orderCode,
      instrument
   );

   StringToCharArray(json, post, 0, StringLen(json));
   ResetLastError();

   int res = WebRequest("POST", url, headers, 5000, post, result, resultHeader);
   if(res == -1)
   {
      Print("placeOrder(): WebRequest failed, err=", GetLastError());
      return res;
   }
   else if(res != 200)
   {
      Print("placeOrder(): server request failed, code=", res);
      return res;
   }
   else
   {
      string msg = CharArrayToString(result);
      Print("placeOrder(): response = ", msg);

      // parse "orderId" from the JSON
      // If the JSON is like { "d": { "orderId": "1" }, "s": "ok" }
      // we might need a more advanced parse. For now we attempt:
      string orderIdStr = getJsonStringValue(msg, "orderId");
      newOrderId = (ulong)StringToInteger(orderIdStr);
      Print("TradeLocker newOrderId=", newOrderId);
   }
   return res;
}

//+------------------------------------------------------------------+
//| closePositions() - calls DELETE /trade/accounts/{accountId}/positions
//+------------------------------------------------------------------+
int closePositions()
{
   // Example usage: we want to close all positions for the given account
   // If we only want to close positions in TRADABLE_INSTRUMENT_ID:
   string url = g_TradeLockerBaseUrl + "/trade/accounts/" + g_TradeLockerAccountId + "/positions";
   if(g_TradableInstrumentId > 0)
      url += "?tradableInstrumentId=" + (string)g_TradableInstrumentId;

   char post[], result[];
   string resultHeader;
   string headers = "Authorization: Bearer " + g_accessToken + "\r\nAccept: application/json\r\n";

   // For a DELETE request with no body:
   int res = WebRequest("DELETE", url, headers, 5000, post, result, resultHeader);
   if(res == -1)
   {
      Print("closePositions(): WebRequest failed, err=", GetLastError());
      return res;
   }
   else if(res != 200)
   {
      Print("closePositions(): server request failed, code=", res);
      return res;
   }
   else
   {
      string msg = CharArrayToString(result);
      Print("closePositions() success. response=", msg);
   }
   return res;
}

//+------------------------------------------------------------------+
//| JSON parse helpers                                               |
//+------------------------------------------------------------------+
string getJsonStringValue(string json, string key)
{
   int indexStart = StringFind(json, key) + StringLen(key) + 3;
   int indexEnd   = StringFind(json, "\"", indexStart);
   return StringSubstr(json, indexStart, indexEnd - indexStart);
}

long getJsonLongValue(string json, string key)
{
   int indexStart = StringFind(json, key) + StringLen(key) + 2;
   int indexEnd   = StringFind(json, ",", indexStart);
   return (long)StringToInteger(StringSubstr(json, indexStart, indexEnd - indexStart));
}
